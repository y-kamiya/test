# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  (0..1).each do |i|
    config.vm.define vm_name = "cli%d" % i do |cli|
      cli.vm.hostname = vm_name
      cli.vm.box = "ubuntu/trusty64"
      cli.vm.network :private_network, ip: "192.168.0.#{100+i}"
      cli.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--memory", "128"]
      end
    end
  end

  (0..1).each do |i|
    config.vm.define vm_name = "lb%d" % i do |lb|
      lb.vm.hostname = vm_name
      lb.vm.box = "ubuntu/trusty64"
      lb.vm.network :private_network, ip: "192.168.0.#{11+i}"
      lb.vm.network "forwarded_port", guest: 80, host: "#{64001+i}"
      lb.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--memory", "256"]
      end
      lb.vm.provision "shell", inline: <<-EOF
        sudo apt-get update -y
        # not necessary in DSR
        echo "net.ipv4.ip_forward=1" | sudo tee /etc/sysctl.conf
        echo "net.ipv4.vs.conntrack" | sudo tee -a /etc/sysctl.conf
        sudo iptables -t nat -A POSTROUTING -m ipvs --vaddr 192.168.0.2/32 --vport 80 -j SNAT --to-source 192.168.0.11
        #sudo sysctl -p
        # not necessary when use keepalived
        #sudo apt-get install -y ipvsadm
        #sudo ip addr add 192.168.0.2/32 dev eth1 label eth1:0

        sudo apt-get install -y keepalived
        sudo cat <<__EOF > /etc/keepalived/keepalived.conf
global_defs {
}


vrrp_instance VI_1 {
    state BACKUP
    interface eth1
    garp_master_delay 10
    smtp_alert
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.0.2
    }
}

virtual_server 192.168.0.2 80 {
    delay_loop 	1
	lb_algo 	wlc
	lb_kind		DR
	protocol 	TCP

	real_server 192.168.0.3 80 {
		weight	1
		inhibit_on_failure
#		TCP_CHECK {
#			connect_port 80
#			connect_timeout 3
#		}
		HTTP_GET {
			url {
				path /index
				status_code 200
			}
			connect_timeout 3
			nb_get_retry 3
			delay_before_retry 3
		}
	}

	real_server 192.168.0.4 80 {
		weight	1
		inhibit_on_failure
		HTTP_GET {
			url {
				path /index
				status_code 200
			}
			connect_timeout 3
			nb_get_retry 3
			delay_before_retry 3
		}
	}

	sorry_server 127.0.0.1 80
}
__EOF
        sudo service keepalived restart
      EOF
    end
  end

  (0..1).each do |i|
    config.vm.define vm_name = "web%d" % i do |web|
      web.vm.hostname = vm_name
      web.vm.box = "ubuntu/trusty64"
      web.vm.network :private_network, ip: "192.168.0.#{i+3}"
      web.vm.network "forwarded_port", guest: 80, host: "#{64011+i}"
      web.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--memory", "256"]
      end
      web.vm.provision "shell", inline: <<-EOF
        sudo apt-get -y update
        sudo apt-get -y install nginx
        echo "web#{i}" | sudo tee /usr/share/nginx/html/index
        echo "auto lo:0\niface lo:0 inet static\naddress 192.168.0.2\nnetmask 255.255.255.255" | sudo tee -a /etc/network/interfaces
        sudo ifup lo:0
        echo "net.ipv4.conf.all.arp_ignore = 1\nnet.ipv4.conf.all.arp_announce = 2" | sudo tee -a /etc/network/interfaces
        sudo sysctl -p
      EOF
    end
  end

  $install_nginx = <<-EOF
    sudo apt-get update
    sudo apt-get install nginx
  EOF

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = "motd.cf"
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.policy_server_address = "10.0.2.15"
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
